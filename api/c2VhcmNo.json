[{"title":"剪辑思维","date":"2024-08-09T09:32:28.000Z","date_formatted":{"ll":"Aug 9, 2024","L":"08/09/2024","MM-DD":"08-09"},"updated":"2024-08-09T09:35:18.382Z","content":"剪辑思维六大要素\n情绪51%  故事23%  节奏10%  视线追踪7%  二维平面5%  三维空间4%\n\n\n三维空间（空间关系）\n①不剪入关系镜头会导致地理位置模糊\n②不要总剪入一些视野受限的镜头\n③每一个镜头都在为观众开拓视野\n\n\n二维平面\n①轴线：让观众清楚位置关系（人物对视方向的一侧正反打）注意：目光方向也要匹配 ②里面的世界是三维的，但屏幕本身不是\n\n\n视线追踪（引导观众跟上你的剪辑）\n①主体多位于正中间，偶尔散开或位于两侧\n②如果一切都是静的我们就看动的……\n③先让自己眼睛舒服\n\n\n节奏（一张一驰带来的感受）\n①节奏不完全等于“踩点”，踩音乐点只是作曲为你设置了节奏\n②除了台词还有很多视听因素控制节奏\n③为你的片子设定一个整体节奏\n④让你的节奏变成曲线而不是一个直线 • 激烈之后是平静，平静之后是激烈 • 关于放慢节奏，必要时插入镜头放缓节奏\n⑤燃能衬静，静能衬燃\n\n\n故事（发明剪辑就是为了更好地讲故事）\n①让前后的片段产生关联，形成组\n②剪辑师让多个镜头形成故事 • 信息被分到不同镜头，每个镜头都有使命，每个镜头都有作用\n③重复切回画面再次强调关联性\n④利用剪辑跳跃一些沉余部分 •长镜头体现真实性 •剪辑是在讲故事\n⑤找到一种最适合的讲述方式\n\n\n情绪\n①一个好的作品总是伴随着丰富又自然的情绪变化\n②长时间陷入一种情绪会产生疲倦\n③情绪是最好的联系，不同场景但情绪相同可以直接衔接\n④剪辑手段可以烘托情绪（例如快剪强化了焦躁不安）\n⑤永远以实际感受为准 结语：当你没有丰富的剪辑经验，无法准确组织一个思路的时候，最好的办法就是一边剪辑一边用这六大要素检查自己，然后做出对应的修改，但也不要钻牛角尖\n\n\n","thumbnail":"https://cdn.cco.moe/img/rain.webp","plink":"http://example.com/post/jianjisiwei/"},{"title":"日常の笔记","date":"2024-01-08T00:08:00.000Z","date_formatted":{"ll":"Jan 8, 2024","L":"01/08/2024","MM-DD":"01-08"},"updated":"2024-05-10T08:34:47.761Z","content":"\n日常记录防止遗忘的小笔记，就当个备份～\n\n\n去掉系统更新小红点\n1234defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 &amp;&amp; killall Dockdefaults delete com.apple.systempreferences AttentionPrefBundleIDsdefaults delete com.apple.systempreferences DidShowPrefBundleIDskillall Dock\n中国银行借记卡进度查询\nhttps://cloud.bankofchina.com/sh/html/h5/card/search.html?index=0&amp;apply=direct&amp;parameter=\npip安装包的时候指定不使用缓存\n1pip install --no-cache-dir nodule_name\npip清理缓存命令\n123pip cache purgesudo rm -rf $HOME/.cache/piprm -rf ~/Library/Caches/pip\n.vimrc开头配置\n123456789101112&quot; Configuration file for vimset modelines=0\t\t&quot; CVE-2007-2438&quot; Normally we use vim-extensions. If you want true vi-compatibility&quot; remove change the following statementsset nocompatible\t&quot; Use Vim defaults instead of 100% vi compatibilityset backspace=2\t\t&quot; more powerful backspacing&quot; Don&#x27;t write backup file if vim is being called by &quot;crontab -e&quot;au BufWrite /private/tmp/crontab.* set nowritebackup nobackup&quot; Don&#x27;t write backup file if vim is being called by &quot;chpass&quot;au BufWrite /private/etc/pw.* set nowritebackup nobackup\nHomebrew中 Permission denied @ apply2files 解决办法\n1sudo chown -R $(whoami) /opt/homebrew/*\npip更新包\n123pip list --outdatedpip install --upgrade &lt;包的名字&gt;pip install -U &lt;包的名字&gt;\nPython更新pip命令如下：\n12python -m pip install --upgrade pippython -m pip install -U pip\nnpm换淘宝源\n12345npm config set registry https://registry.npm.taobao.org# 或者使用nrmnpm install -g nrmnrm use taobao\npip换清华源\n12python -m pip install --upgrade pippip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple  # 永久换源\n1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package  # 临时换源\nflarum论坛，解决duo-mysql问题\n12sudo apt-get --purge remove php-commonsudo apt-get install php-common php-mysql php-cli\n","thumbnail":"https://cdn.cco.moe/pixiv/86770232_p0.webp","plink":"http://example.com/post/note/"},{"title":"前期准备-Web前端","date":"2023-10-20T13:34:15.000Z","date_formatted":{"ll":"Oct 20, 2023","L":"10/20/2023","MM-DD":"10-20"},"updated":"2024-01-11T12:48:52.470Z","content":"\n学长课堂前期准备教程\n\n\n一、nodejs安装并配置\n(1) 安装\n在nodejs官网 https://nodejs.org/en/download/current 下载好 nodejs 安装包，\n\n注意下载 .msi 版本，并且根据自己电脑cpu架构选择合适的版本，一般下载64-bit。然后打开安装包进行安装，安装路径在 C:\\Program Files\\nodejs ，以下的所有组件都勾选：\n安装程序完成后，按下 win+R 键，输入 cmd 打开终端，输入以下指令：\n12node -v   # 查看node版本号npm -v    # 查看npm版本号\n如果终端均给出了相应的版本号则说明安装成功：\n\n(2) 环境配置\n使用 管理员权限❗️❗️ 打开终端，即在开始菜单搜索cmd，然后鼠标右键 cmd.exe 以管理员身份运行，然后输入以下命令进入nodejs安装目录(如果没有使用管理员权限打开终端就运行以下代码会出现 permission denied❗️ )：\n1cd C:\\Program files\\nodejs    # 进入nodejs目录\n然后输入以下命令创建全局组件文件夹和缓存文件夹：\n12mkdir node_global  # 创建全局组件文件夹mkdir node_cache   # 创建缓存文件夹\n然后输入以下命令设置npm全局包目录和缓存目录：\n12npm config set prefix &quot;C:\\Program Files\\nodejs\\node_global&quot;npm config set cache &quot;C:\\Program Files\\nodejs\\node_cache&quot;\n以上操作如果终端没有报错则说明命令执行成功，接下来进行下一步，设置系统环境变量。首先在桌面找到 我的电脑 ，选中右键选择 属性 ，选择 高级 ，然后在底部选择 环境变量 ：\n进去后首先修改 用户变量 ，将环境变量 Path 中的npm路径更换为刚才设置的 node_global 全局包 的路径。\n即，将以上红框部分修改为以下路径：\n1C:\\Program Files\\nodejs\\node_global\n然后点击确定，然后还需要在 Path 变量中新建 %NODE_PATH% ,如下图：\n用户变量设置好之后再新建一个系统变量，如图：\n添加以下内容：\n变量名：NODE_PATH\n变量值：C:\\Program Files\\nodejs\\node_global\\node_modules\n然后点击确定，到此nodejs安装及环境配置完成。\n二、Vue脚手架创建\nVue依赖于nodejs，安装好nodejs之后就可以直接创建Vue脚手架，打开终端，cd到想要使用Vue的项目文件夹中，输入以下命令即可：\n1npm create vue@latest\n这一指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：\n123456789101112✔ Project name: … &lt;your-project-name&gt;✔ Add TypeScript? … No / Yes✔ Add JSX Support? … No / Yes✔ Add Vue Router for Single Page Application development? … No / Yes✔ Add Pinia for state management? … No / Yes✔ Add Vitest for Unit testing? … No / Yes✔ Add an End-to-End Testing Solution? … No / Cypress / Playwright✔ Add ESLint for code quality? … No / Yes✔ Add Prettier for code formatting? … No / YesScaffolding project in ./&lt;your-project-name&gt;...Done.\n如果不确定是否要开启某个功能，你可以直接按下回车键选择 No .\n三、VSCode汉化\n在VSCode侧边栏中选择扩展，输入 Chinese (Simplified) Language Pack for Visual Studio Code 后回车，然后安装 重启 即可实现汉化。\n\n四、VSCode插件推荐\nHTML CSS Support\n\nopen in brower\n\nPath Intellisense\n\nPrettier - Code formatter\n\n","thumbnail":"https://cdn.cco.moe/img/img03.webp","plink":"http://example.com/post/webpre/"},{"title":"Homebrewの安装教程","date":"2023-08-06T14:06:08.000Z","date_formatted":{"ll":"Aug 6, 2023","L":"08/06/2023","MM-DD":"08-06"},"updated":"2023-12-06T17:29:10.688Z","content":"Homebrew相当于macOS的第二App Store，虽称为第二，但是软件生态却要比App Store丰富得多，大量在App Store中没有收录的软件都可以用Homebrew进行安装。\n\n也正因如此，开发者们几乎都愿意将自己开发的软件上传到Homebrew中，这就使得Homebrew的软件生态越来越大，甚至让苹果公司也愿意帮助Homebrew开发团队攻克基于Apple Silicon开发的难题 (毕竟对苹果自家的Mac而言没有坏处，甚至成为Mac的一大亮点) 。\nHomebrew由于其本身的源在国外，在国内使用官方源的体验并不是很好(Clash X Pro同时开启系统代理和增强模式可使terminal也用上代理)，所以我使用的是清华源的Homebrew，接下来详细介绍清华源Homebrew的安装教程 (其实是防止自己脑袋不够用怕忘掉) 。 (Apple Silicon, Macbook air M1, macOS Monterey, zsh.)\n配置环境变量\n首先，cd到个人目录(~)新建一个 .zprofile 文件：\n12cd ~touch .zprofile  # 默认shell为zsh使用该命令\n然后，将 brew 程序的相关路径加入到环境变量中。以下针对基于 Apple Silicon CPU 设备上的 macOS 系统 (命令行运行 uname -m 应输出 arm64) 上的 Homebrew ：\n1test -r ~/.zprofile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;&gt;&gt; ~/.zprofile\ntips: macOS Monterey的默认Shell是zsh, 在用户目录(~)中有 .zprofile , 没有 .bash_profile , 所以只需在终端中运行第二条命令即可。\n也可以直接在 .zprofile 文件中直接添加以下代码：\n1eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;\n安装Homebrew\n然后，需要通过安装脚本安装Homebrew，安装完成之后再通过修改环境变量的方式来修改镜像源。其中两种安装脚本，分别是清华源和官方的安装脚本 (在终端中执行以下任一种即可) ：\n1234567# 从清华源镜像站下载安装脚本并安装 Homebrew # 三条命令，分行运行git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install/bin/bash brew-install/install.shrm -rf brew-install# 从 GitHub 获取官方安装脚本安装 Homebrew /bin/bash -c &quot;$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)&quot; \n更换镜像源\n然后在 .zprofile 文件中手动添加以下环境变量即可更换Homebrew的镜像源：\n12345export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;export HOMEBREW_PIP_INDEX_URL=&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;\n也可以在终端直接运行以下命令即可添加环境变量到 .zprofile 文件中：\n12345test -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;&#x27; &gt;&gt; ~/.zprofiletest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.zprofiletest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.zprofiletest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.zprofiletest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_PIP_INDEX_URL=&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;&#x27; &gt;&gt; ~/.zprofile\ntips: 自brew 4.0.0 (2023 年 2 月 16日) 起，HOMEBREW_INSTALL_FROM_API 会成为默认行为，无需设置。大部分用户无需再克隆 homebrew-core 仓库，故无需设置 HOMEBREW_CORE_GIT_REMOTE 环境变量；但若需要运行 brew 的开发命令或者 brew 安装在非官方支持的默认 prefix 位置，则仍需设置 HOMEBREW_CORE_GIT_REMOTE 环境变量。如果不想通过 API 安装，可以设置 HOMEBREW_NO_INSTALL_FROM_API=1。\n配置tap仓库镜像源\n然后重启terminal (重启terminal之后，环境变量即可生效) ，针对macOS系统上的Homebrew更换tap仓库的镜像源 (此处最好将对应文件删除后再执行以下代码) ：\n12345678910111213141516171819# tips：自 brew 4.0 起，大部分 Homebrew 用户无需设置 homebrew/core 和 homebrew/cask 镜像，只需设置 HOMEBREW_API_DOMAIN 即可。# 如果需要使用 Homebrew 的开发命令 (如 `brew cat &lt;formula&gt;`)，则仍然需要设置 homebrew/core 和 homebrew/cask 镜像。# 请按需执行如下两行命令(日常用的话不需要执行)：brew tap --custom-remote --force-auto-update homebrew/core https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew tap --custom-remote --force-auto-update homebrew/cask https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git# 除 homebrew/core 和 homebrew/cask 仓库外的 tap 仓库仍然需要设置镜像brew tap --custom-remote --force-auto-update homebrew/cask-fonts https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.gitbrew tap --custom-remote --force-auto-update homebrew/cask-versions https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-versions.gitbrew tap --custom-remote --force-auto-update homebrew/command-not-found https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-command-not-found.gitbrew tap --custom-remote --force-auto-update homebrew/services https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-services.gitbrew update# 或使用下面的几行命令自动设置export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;fortapincore cask&#123;,-fonts,-versions&#125; command-not-found services;dobrew tap --custom-remote --force-auto-update &quot;homebrew/$&#123;tap&#125;&quot; &quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-$&#123;tap&#125;.git&quot;donebrew update\n重启终端，安装完成，enjoy…\n复原官方源\n如果想要复原官方的镜像源，可以在终端运行以下代码 (只针对于macOS上的Homebrew) ：\n12345678910111213141516# 对于 brew 程序本身unset HOMEBREW_BREW_GIT_REMOTEgit -C &quot;$(brew --repo)&quot; remote set-url origin https://github.com/Homebrew/brew# 以下针对 macOS 系统上的 Homebrew unset HOMEBREW_API_DOMAINunset HOMEBREW_CORE_GIT_REMOTEBREW_TAPS=&quot;$(BREW_TAPS=&quot;$(brew tap 2&gt;/dev/null)&quot;; echo -n &quot;$&#123;BREW_TAPS//$&#x27;\\n&#x27;/:&#125;&quot;)&quot;for tap in core cask&#123;,-fonts,-versions&#125; command-not-found services; do    if [[ &quot;:$&#123;BREW_TAPS&#125;:&quot; == *&quot;:homebrew/$&#123;tap&#125;:&quot;* ]]; then  # 只复原已安装的 Tap        brew tap --custom-remote &quot;homebrew/$&#123;tap&#125;&quot; &quot;https://github.com/Homebrew/homebrew-$&#123;tap&#125;&quot;    fidone# 重新拉取远程brew update\n本文参考了清华大学镜像站，另外 Linuxbrew 安装详见 https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/ . 不许转载😡！！！\n","thumbnail":"https://cdn.cco.moe/img/img01.webp","plink":"http://example.com/post/homebrewinstall/"},{"title":"Blog Building","date":"2023-06-08T14:08:00.000Z","date_formatted":{"ll":"Jun 8, 2023","L":"06/08/2023","MM-DD":"06-08"},"updated":"2023-12-06T17:28:57.143Z","content":"\nHexo是基于Nodejs的静态博客框架，快速、简约且高效。\n\n\nHexo安装\nGit和Nodejs对于Hexo的安装不可或缺，macOS可以使用Homebrew进行安装：\n12brew install gitbrew install node\n安装完Nodejs的同时就已经拥有了npm包管理器，这个时候需要用npm安装Hexo：\n1npm install hexo-cli -g\n之后最好在 个人目录(~) 中手动创建博客根目录 blog (名称可以任意取) ，也可以cd到 个人目录(~) 后运行以下命令：\n1hexo init blog # 创建博客根目录并初始化\n然后cd到 blog 目录，安装Hexo所必需的组件：\n1npm install\n到这一步其实Hexo博客就已经在本地搭建好了，这个时候运行以下命令：\n123hexo clean    # 清除网页缓存，此时博客刚刚搭建好，也可以暂时不运行此命令hexo g        # 生成静态文件hexo s        # 启动服务器预览，默认在本地4000端口运行\n然后在默认情况下，访问 http://localhost:4000/ 即可在本地预览博客页面了。但此时的博客并不好看，因此我们还要给博客安装主题，以我安装的ikeq的inside主题为例 (以主题的文档说明为准，不同的主题安装方式不同) ：\n\ncd到 blog 目录并运行以下命令：\n\n1npm install hexo-theme-inside\n\n然后打开 blog/_config.yml 找到 theme 并修改为：\n\n1theme: inside # 不要忘记:之后有空格\n\n\n复制 _config.yml 中的全部代码到 blog/_config.inside.yml 中 (如果没有 _config.inside.yml 文件则自行创建一个，可手动创建，也可cd到 blog 目录运行以下命令：) 。\n1touch _config.inside.yml\n\n\n至此，Hexo博客就已经初步搭建完成了，接下来就可以将博客托管到Github Pages (也可以托管到Cloudflare、Vercel等其他平台，此处以Github为例) 。\nGithub Pages托管\n首先，需要在Github中创建一个名称为 name.github.io 的仓库 (name是自定义的，并且每个Github账号只能创建一个这样的仓库) 才能配合Github Pages使用。如果有需求，在该仓库 Settings 的 Pages 选项中可以 Custom domain (自定义域名) 。\n然后需要在 blog/_config.yml 的底部找到 deploy 这一项来设置博客的部署类型、GitHub仓库地址、仓库分支：\n1234deploy:\ttype: git\trepo: https://github.com/username/name.github.io # username为GitHub用户名，name为新建仓库时设置的用户名\tbranch: master # 如果没有修改仓库分支，则默认为 master\n下一步需要cd到博客的根目录 blog 安装Hexo部署插件 hexo-deployer-git ：\n1npm install hexo-deployer-git --save\n然后在终端运行以下命令，全局设置Git的用户名和邮箱，即配置Github环境：\n12git config --global user.name &quot;username&quot;    # Github的用户名git config --global user.email &quot;youremail&quot;  # Github绑定的邮箱\n最后再次运行以下命令，即可将修改的配置生成静态文件并部署到GitHub：\n1234hexo clean    # 清楚网页缓存hexo g        # 生成静态文件hexo s        # 启动服务器预览，默认在本地4000端口运行hexo d        # 将生成的静态文件部署到Github\n在部署到GitHub的时候最好使用代理网络 (macOS建议使用 Clash X Pro ，可参考我另外一篇文章Macの日常中的第(2)点，毕竟Github的服务器在国外，国内的访问体验较差) 。同时，由于前面配置了Github环境，所以在部署的过程中会提示让输入Github的密码，输入密码后即可完成部署 (终端中输入密码时不会有任何显示) 。\n​\tTips： 此处的密码并不是Github账号的密码，而是在github中 Settings &gt; Developer settings &gt; Personal access tokens &gt; Tokens (classic) 处生成的Tokens, 最好将这个Tokens记录下来，如果忘记就只能重新生成。\nHexo使用\n创建新文章可运行以下命令：\n1hexo new NewPost # NewPost 为自定义的文章名称\n而文章则被生成在 blog/source/_posts 文件夹下。\n如果想要创建草稿但是又不发表到博客中，则可以运行以下命令：\n1hexo n draft NewPost # n 即为 new 的缩写\n此时，文章则被生成在 blog/source/_draft 文件夹下而不会被发表在博客中，只有 _posts 文件夹下的文章才会出现在博客中。\n如果想要将 _draft 文件夹中的文章发表在博客中，运行以下命令即可：\n1hexo publish NewPost # 此时 NewPost 为生成的markdown文档 .md 后缀前面的名称，空格会被替换为 - \n运行完这条命令之后，这篇文章及其资源文件夹就都会从 _draft 文件夹移至 _posts 文件夹。然后再次运行命令 (以下三条命令很重要，会经常用到！) ：\n123hexo clean    # 清楚网页缓存hexo g        # 生成静态文件hexo d        # 将生成的静态文件部署到Github\n部署完成之后，文章就会出现在博客中了。\nHexo进阶\n配置front-matter\nfront-matter 就是Hexo文章的属性集合 (可以这么理解) ，位于markdown文档的顶部区域，其中包含了Hexo文章的多个属性。Hexo默认属性包含以下几种：\n12345678title:        # 文章标题date:         # 文章日期updated:      # 文章更新日期comments:     # 开启文章评论功能tags:         # 文章标签categories:   # 文章分类layout:       # 文章布局permalink:    # 文章链接格式(会覆盖根设置)\n详见 https://hexo.io/docs/front-matter 。\ninside主题 (类似的主题) 还有一个 thumbnail 属性：\n1thumbnail:    # 文章的头图路径\n部署报错\n如果发现Hexo部署报错，最简单的解决办法就是删掉 blog/.deploy_git 文件夹，然后重新部署 ( .deploy_git 文件夹为隐藏文件夹，Mac需同时按下 shift+command+. 显示隐藏文件) 。\n修改文章链接格式\n文章的链接一开始默认是按照 年/月/日/标题 的格式来分类和显示的，但是这样并不好看且显得复杂，因此需要在 blog/_config.yml 文件中找到 permalink 这一项，并将其修改为：\n1permalink: post/:title/ # post 将一直保留，而 :title 则显示为每篇文章的title\n这样文章链接就是按照 post/title 的格式来分类和显示的，更加简洁好看。\n开启文章资源文件夹\nHexo默认没有开启文章资源文件夹，所有的资源 (除文章以外的所有文件)  都存储在全局资源文件夹 blog/source 中，如果想要更有规律地管理图片及其他资源，则需要开启文章资源文件夹，因此需要在 blog/_config.yml 文件中找到 post_asset_folder 这一项并修改为：\n1post_asset_folder: true\n修改Hexo语言\n如果Hexo语言为中文，则Hexo主题中一些菜单栏的英文会被自动翻译成中文。但是有时候主题中的中文字体并没有英文字体好看，因此可以将Hexo的语言更改为英文或者其他语言。需要在 blog/_config.yml 文件中找到 language 这一项并修改为：\n123456language: en    # 英语# 或者其他语言language: es    # 西班牙语language: fr    # 法语language: de    # 德语language: zh    # 中文\n重新部署，enjoy…\n本文参考了Hexo帮助文档，详见 https://hexo.io/zh-cn/docs/ . 不许转载😡！！！\n","thumbnail":"https://cdn.cco.moe/img/img07.webp","plink":"http://example.com/post/blogbuilding/"},{"title":"MacOS下zsh主题更换","date":"2023-03-07T18:01:12.000Z","date_formatted":{"ll":"Mar 8, 2023","L":"03/08/2023","MM-DD":"03-08"},"updated":"2023-12-06T17:29:36.046Z","content":"初始准备\n(1)安装 Starship\n命令：brew install starship\n(2)安装字体 Nerd Fonts 字体，并在 zsh 中启用该字体\n(此处我选择的字体是 JetBrains Mono )\n命令：brew tap homebrew/cask-fonts\nbrew install --cask font-jetbrains-mono-nerd-font\n(3)检查~目录中是否有 .zshrc 这个文件\n如果没有，则\ncd到用户目录(~)并在终端中使用命令 touch .zshrc (新建一个 .zshrc 文件)\n然后可以在 .zshrc 中添加 zinit 插件\n以下的做法我不太确定是否有用，因为我的 MacOS Monterey 中的环境变量好像是存储在 .zprofile 中的。我想可能是有点用的，还是可以照做一下。\n首先cd到用户目录(~)并在终端中使用命令 touch .bash_profile (新建一个 .bash_profile 文件)\n然后在 .zshrc 文件中加入 source ~/.bash_profile\n即，在终端输入命令\nopen -e .zshrc (打开 .zshrc 文件，-e 的意思是将光标定位到文末最后，节省向文末滚动的时间)\n然后在打开的 .zshrc 文件中加入 source ~/.bash_profile\nStarship配置\n需要创建配置文件 ~/.config/starship.toml 以供 Starship 使用\n命令：mkdir -p ~/.config &amp;&amp; touch ~/.config/starship.toml\n然后就可以在 starship.toml 中customize自己想要的风格\n","thumbnail":"https://cdn.cco.moe/img/img06.webp","plink":"http://example.com/post/starship/"},{"title":"Macの日常","date":"2022-12-30T14:06:08.000Z","date_formatted":{"ll":"Dec 30, 2022","L":"12/30/2022","MM-DD":"12-30"},"updated":"2023-12-06T17:29:22.175Z","content":"(1)Homebrew\nHomebrew 可以说是macOS必装的包管理器，几乎所有具有图形化界面和不具有图形化界面的程序它都可以通过brew install ...(包名)安装，并且管理也非常方便，只需命令行brew upgrade ...(包名)即可进行更新(也可以直接使用brew upgrade更新所有程序)，命令行brew uninstall ..(包名)即可进行卸载。我主要是用它来安装不具有图形化界面的程序，简直不要太方便。\n(2)Clash X Pro(已停止维护)\n想要在Mac上科学上网，那么Clash X Pro(俗称小猫咪)就必不可少。但是其并未像其他平台的Clash一样开源，因此无法在Github上下载，可以在App Center进行下载。\n(3)IINA\nMac自带的播放器QuickTime Player太过简单，所以多数时候都选择使用第三方播放器，IINA绝对是Mac上最好用的播放器之一，无边框设计，而且功能非常强大，完全能够满足日常需求，并且其也已经在GitHub上开源，没有任何广告。\n","thumbnail":"https://cdn.cco.moe/img/img02.webp","plink":"http://example.com/post/maclife/"},{"title":"Hi World","date":"2022-12-03T14:03:03.000Z","date_formatted":{"ll":"Dec 3, 2022","L":"12/03/2022","MM-DD":"12-03"},"updated":"2023-09-12T14:06:15.173Z","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\nQuick Start\nCreate a new post\n1hexo new NewPost\nMore info: Writing\nRun server\n1hexo server\nMore info: Server\nGenerate static files\n1hexo generate\nMore info: Generating\nDeploy to remote sites\n1hexo deploy\nMore info: Deployment\n","plink":"http://example.com/post/hello/"}]